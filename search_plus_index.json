{"./":{"url":"./","title":"Introduction","keywords":"","body":"Gitbook Manual How to install, run and build gitbook. Introduction GitBook 是目前最流行的开源书籍写作方案，可以把Markdown 文件汇集成电子书，并提供 PDF、HTML 等多种格式输出。一般还需配合 Markdown 文本编辑器、Git 代码管理工具和 GitHub 托管仓库使用。 ⚠️ Deprecation warning: As the efforts of the GitBook team are focused on the GitBook.com platform, the CLI is no longer under active development.All content supported by the CLI are mostly supported by our GitBook.com / GitHub integration.Content hosted on the legacy.gitbook.com will continue working until further notice. For differences with the new vesion, check out our documentation. Install npm install -g gitbook-cli nvm use 10 gitbook install gitbook serve 执行命令，GitBook 会启动一个 4000 端口 （http://localhost:4000） 用于预览。 ./build.sh 上述命令默认将生成的静态网站输出到 _book 目录。 GitBook GitBook is a command line tool (and Node.js library) for building beautiful books using GitHub/Git and Markdown (or AsciiDoc). Here is an example: Learn Javascript. You can publish and host books easily online using gitbook.com. A desktop editor is also available. Stay updated by following @GitBookIO on Twitter or GitBook on Facebook. Complete documentation is available at toolchain.gitbook.com. Getting started GitBook can be used either on your computer for building local books or on legacy.gitbook.com for hosting them. To get started, check out the installation instructions in the documentation. Usage examples GitBook can be used to create book, public documentation, enterprise manual, thesis, research papers, etc. You can find a list of real-world examples in the documentation. Help and Support We're always happy to help out with your books or any other questions you might have. You can ask a question on the following contact form at gitbook.com/contact or signal an issue on GitHub. Features Write using Markdown or AsciiDoc Output as a website or ebook (pdf, epub, mobi) Multi-Languages Lexicon / Glossary Cover Variables and Templating Content References Plugins Beautiful default theme Publish your book The platform legacy.gitbook.com is like an \"Heroku for books\": you can create a book on it (public, or private) and update it using git push. Licensing GitBook is licensed under the Apache License, Version 2.0. See LICENSE for the full license text. © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:40:56 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"install.html":{"url":"install.html","title":"Install","keywords":"","body":"GitBook安装过程 安装 Node.js GitBook 是基于 Node.js的，所以我们首先需要安装对应版本的 Node.js（下载网址：https://nodejs.org/en/download/） 目前Node.js的最新稳定版本对GitBook可能不兼容（在后续安装和启动 GitBook 命令时会出现错误提示），直接安装v10.22.0。 nvm use 10 安装GitBook npm install -g gitbook-cli 确认GitBook安装完成 gitbook -V 如果在上一步骤GitBook安装成功，命令行中会展示版本信息。至此，恭喜你安装成功。 避坑指南 安装速度问题 问题： 执行 gitbook -V 时显示：Installing GitBook 3.2.3 …….，之后出现长时间卡顿 解决办法1： 科学上网 解决办法2： 切换为使用国内速度较快的淘宝镜像。 在cmd执行命令： npm config set registry=http://registry.npm.taobao.org -g Node.js版本问题 说明Node.js的版本环境有问题，需要降低Node版本。测试下来在v10.22.0是可以正常使用的，下面以该版本的安装为例，展示上述报错的解决方案。 解决办法1： 卸载已下载版本，重新下载10.22.0版本的Node.js（下载网址：https://nodejs.org/zh-cn/download/releases/） 缺点：对未来Node.js版本的更新或多个版本之间的切换使用不太方便 解决办法2： 使用Node.js的版本管理器nvm（Node.js Version Manager）。nvm可以帮助实现在同一台设备上进行多个node版本之间的切换。主要步骤： 使用nvm命令实现多版本node的下载和切换： nvm -v 查看nvm版本信息： nvm install 10.22.0 安装多版本 node/npm（以v10.22.0为例）： nvm use 10.22.0 使用特定Node版本（以v10.22.0为例）： nvm ls available 查看远程服务器上的可用Node版本： nvm ls 查看本机的可用Node版本 © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"setup.html":{"url":"setup.html","title":"Setup","keywords":"","body":"GitBook使用简介 GitBook创建及预览 创建书籍： 新建一个文件夹，在文件夹下打开命令窗口（在文件夹地址栏输入cmd后回车或在cmd中用cd命令），初始化文件夹： gitbook init 执行上述命令后，会自动生成两个必要的文件 README.md 和 SUMMARY.md。 README.md: 书的介绍文字，如前言、简介，在章节中也可做为章节的简介。 SUMMARY.md: 定制书籍的章节结构和顺序。 预览书籍： gitbook serve 执行命令，GitBook 会启动一个 4000 端口 （http://localhost:4000） 用于预览。 但由于GitBook版本不稳定，有时运行serve命令会出现报错： Error: ENOENT: no such file or directory, stat '~~~.js' 解决办法： 在用户目录下找到以下文件.gitbook\\versions\\3.2.3\\lib\\output\\website\\copyPluginAssets.js ，把所有的 confirm: true 替换为 confirm: false。 构建书籍： gitbook build 上述命令默认将生成的静态网站输出到 _book 目录。 实际上，这一步也包含在 gitbook serve 里面，但 gitbook build 可以指定路径： gitbook build [书籍路径] [输出路径] 生成其它格式的电子书： gitbook pdf ./ ./mybook.pdf gitbook epub ./ ./mybook.epub gitbook mobi ./ ./mybook.mobi GitBook插件 官方获取插件地址： https://plugins.gitbook.com/ 安装插件只需要在书籍目录下增加 book.json 文件，例如增加折叠目录的插件，需要在 book.json 内增加下面代码: { \"plugins\": [\"expandable-chapters-small\"], \"pluginsConfig\": { \"expandable-chapters-small\":{} } } 然后终端执行 install 来安装插件即可： gitbook install © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:49 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"markdown-preview-github-styling.html":{"url":"markdown-preview-github-styling.html","title":"Markdown Preview Github Styling","keywords":"","body":"Vscode 安装 Markdown 增强插件 安装 Vscode 随便找个搜索引擎，搜vscode，不出意外，第一个结果应该就是vscode的官方网站，长这样—— 安装 Markdown 增强插件 vscode默认是支持Markdown的，但是我们还是需要一些额外的插件来辅助。如前文安装中文包一般，到vscode的插件市场中，搜索Markdown关键字，安装这两个插件—— 第一个插件，是一个组合包，一股脑把最常用的Markdown优化都给你装好； 第二个插件，则是Github使用的Markdown渲染样式，不是特别华丽，很朴素，很简洁的样式，因为很多人用Markdown都是为了使用Github Pages，所以这个样式特别受欢迎。使用这个样式，在本地就能预览Markdown文件最终在Github Pages中显示的效果。 开始你的第一篇 Markdown 文档 当你输入.md的后缀时，你会发现，新建的文件名前多了一个logo，这代表它已经被vscode识别为markdown文件了。现在，你就可以开始写markdown了。 在继续之前，请点击右上角的这个图标—— 然后你的页面就会变成两栏分列的样子；右侧这一栏就是markdown文件被渲染为HTML的预览；由于我们安装饿了Github的渲染风格，所以这里会按照Github的样式来渲染你的markdown文件。 © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"markdown-cheat-sheet.html":{"url":"markdown-cheat-sheet.html","title":"Markdown Cheat Sheet","keywords":"","body":"Markdown Cheat Sheet Thanks for visiting The Markdown Guide! This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can’t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax. Basic Syntax These are the elements outlined in John Gruber’s original design document. All Markdown applications support these elements. Heading H1 H2 H3 Bold bold text Italic italicized text Blockquote blockquote Ordered List First item Second item Third item Unordered List First item Second item Third item Code code Horizontal Rule Link Markdown Guide Image Extended Syntax These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements. Table Syntax Description Header Title Paragraph Text Fenced Code Block { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } Footnote Here's a sentence with a footnote. 1 1. This is the footnote. ↩ Heading ID My Great Heading Definition List term : definition Strikethrough The world is flat. Task List [x] Write the press release [ ] Update the website [ ] Contact the media Emoji That is so funny! :joy: (See also Copying and Pasting Emoji) Highlight I need to highlight these ==very important words==. Subscript H~2~O Superscript X^2^ © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"monaco-editor-nginx.html":{"url":"monaco-editor-nginx.html","title":"Monaco Editor Nginx","keywords":"","body":"Monaco Editor Nginx Nginx language plugin for the Monaco Editor. It provides the following features when editing Nginx config files: Syntax highlighting Quick Start npm install monaco-editor-nginx import MonacoEditor from \"@uiw/react-monacoeditor\"; import \"monaco-editor-nginx\"; ; or, Integrating the ESM version of the Monaco Editor import * as monaco from \"monaco-editor\"; import \"monaco-editor-nginx\"; monaco.editor.create(document.getElementById(\"container\"), { theme: \"nginx-theme\", value: \"nginx code.....\", language: \"nginx\", }); Development Runs the project in development mode. # Step 1, run first, listen to the component compile and output the .js file # listen for compilation output type .d.ts file npm run watch # Step 2, development mode, listen to compile preview website instance npm run start Builds the app for production to the build folder. npm run build The build is minified and the filenames include the hashes. Your app is ready to be deployed! Related @uiw/react-monacoeditor: Monaco Editor component for React. @uiw/react-codemirror: CodeMirror component for React. @codemirror @uiw/react-markdown-editor: A markdown editor with preview, implemented with React.js and TypeScript. @uiw/react-md-editor: A simple markdown editor with preview, implemented with React.js and TypeScript. @uiw/react-markdown-preview: React component preview markdown text in web browser. Contributors As always, thanks to our amazing contributors! Made with github-action-contributors. License Licensed under the MIT License. © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"react-markdown-preview.html":{"url":"react-markdown-preview.html","title":"React Markdown Preview","keywords":"","body":"React Markdown Preview React component preview markdown text in web browser. The minimal amount of CSS to replicate the GitHub Markdown style. The current document website is converted using this react component. Features 🌒 Support dark-mode/night-mode. @v4 🙆🏼‍♂️ GitHub style: The markdown content is rendered as close to the way it's rendered on GitHub as possible. 🏋🏾‍♂️ Support GFM (autolink literals, footnotes, strikethrough, tables, tasklists). 🍭 Support automatic code block highlight. 🐝 Support for defining styles via comment. ⛳️ Support for GFM footnotes Quick Start $ npm install @uiw/react-markdown-preview --save Usage Example import MarkdownPreview from \"@uiw/react-markdown-preview\"; const source = ` ## MarkdownPreview > todo: React component preview markdown text. `; function Demo() { return ; } Options Props import { ReactMarkdownProps } from \"react-markdown\"; type MarkdownPreviewProps = { className?: string; source?: string; style?: React.CSSProperties; warpperElement?: HTMLDivElement; pluginsFilter?: ( type: \"rehype\" | \"remark\", plugin: PluggableList ) => PluggableList; onScroll?: (e: React.UIEvent) => void; onMouseOver?: (e: React.MouseEvent) => void; } & ReactMarkdownProps; source (string, default: '')\\ Markdown to parse className (string?)\\ Wrap the markdown in a div with this class name This ReactMarkdownProps details. Upgrade react-markdown v6 children (string, default: '')\\ Markdown to parse className (string?)\\ Wrap the markdown in a div with this class name skipHtml (boolean, default: false)\\ Ignore HTML in Markdown completely sourcePos (boolean, default: false)\\ Pass a prop to all components with a serialized position (data-sourcepos=\"3:1-3:13\") rawSourcePos (boolean, default: false)\\ Pass a prop to all components with their [position][] (sourcePosition: {start: {line: 3, column: 1}, end:…}) includeElementIndex (boolean, default: false)\\ Pass the index (number of elements before it) and siblingCount (number of elements in parent) as props to all components allowedElements (Array., default: undefined)\\ Tag names to allow (can’t combine w/ disallowedElements). By default all elements are allowed disallowedElements (Array., default: undefined)\\ Tag names to disallow (can’t combine w/ allowedElements). By default no elements are disallowed allowElement ((element, index, parent) => boolean?, optional)\\ Function called to check if an element is allowed (when truthy) or not. allowedElements / disallowedElements is used first! unwrapDisallowed (boolean, default: false)\\ Extract (unwrap) the children of not allowed elements. By default, when strong is not allowed, it and it’s children is dropped, but with unwrapDisallowed the element itself is dropped but the children used linkTarget (string or (href, children, title) => string, optional)\\ Target to use on links (such as _blank for ) transformLinkUri ((href, children, title) => string, default: ./uri-transformer.js, optional)\\ URL to use for links. The default allows only http, https, mailto, and tel, and is exported from this module as uriTransformer. Pass null to allow all URLs. See [security][] transformImageUri ((src, alt, title) => string, default: ./uri-transformer.js, optional)\\ Same as transformLinkUri but for images components (Object., default: {})\\ Object mapping tag names to React components remarkPlugins (Array., default: [])\\ List of remark plugins to use. See the next section for examples on how to pass options rehypePlugins (Array., default: [])\\ List of rehype plugins to use. See the next section for examples on how to pass options Markdown Features Supports for CSS Style Use HTML comments to let Markdown support style customization. ## Title Markdown Supports **Style** Support for GFM footnotes Here is a simple footnote[^1]. With some additional text after it. [^1]: My reference. Support dark-mode/night-mode By default, the dark-mode is automatically switched according to the system. If you need to switch manually, just set the data-color-mode=\"dark\" parameter for body. document.documentElement.setAttribute(\"data-color-mode\", \"dark\"); document.documentElement.setAttribute(\"data-color-mode\", \"light\"); Inherit custom color variables by adding .wmde-markdown-var selector. const Demo = () => { return ( ); }; Development Runs the project in development mode. # Step 1, run first, # listen to the component compile and output the .js file # listen for compilation output type .d.ts file # listen to the component compile and output the .css file npm run watch # Step 2, development mode, listen to compile preview website instance npm start Builds the app for production to the build folder. npm run build The build is minified and the filenames include the hashes. Your app is ready to be deployed! Alternatives If you need more features-rich Markdown Editor, you can use @uiwjs/react-markdown-editor @uiw/react-markdown-editor: A markdown editor with preview, implemented with React.js and TypeScript. @uiw/react-md-editor: A simple markdown editor with preview, implemented with React.js and TypeScript. @uiw/react-textarea-code-editor: A simple code editor with syntax highlighting. @uiw/react-codemirror: CodeMirror component for React. @codemirror @uiw/react-monacoeditor: Monaco Editor component for React. Contributors As always, thanks to our amazing contributors! Made with action-contributors. License Licensed under the MIT License. © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"react-code-preview.html":{"url":"react-code-preview.html","title":"React code Preview","keywords":"","body":"React Code Preview Code edit preview for React. Preview Demo: https://uiwjs.github.io/react-code-preview There are often a lot of sample code in the documentation. We hope that you can run the sample code to view the rendering interface as you read the document. Install npm install @uiw/react-code-preview --save Usage import Button from \"@uiw/react-button\"; import CodePreview from \"@uiw/react-code-preview\"; const code = `import Button from '@uiw/react-button'; ReactDOM.render( 主要按钮 成功按钮 , _mount_ ); `; export default function App() { return ; } _mount_ Special strings, the compilation will be replaced. Props interface CodePreviewProps extends SplitProps { prefixCls?: string; style?: React.CSSProperties; /** * To specify a CSS class, use the className attribute. */ className?: string; /** * Whether to display the border. */ bordered?: boolean; /** * `JSX` source code */ code?: string; /** * Whether to display the code interface. */ noCode?: boolean; /** * Is the background white or plaid? */ bgWhite?: boolean; /** * Only show Edit */ onlyEdit?: boolean; /** * Whether to display the preview interface. */ noPreview?: boolean; /** * Preview area does not display scroll bars */ noScroll?: boolean; /** * Modify ReactCodemirror props. */ editProps?: ReactCodeMirrorProps; /** * Dependent component */ dependencies?: Record; codePenOption?: CodepenProps & { /** * Packages that do not require comments. * @example ['uiw'] */ includeModule?: string[]; }; codeSandboxOption?: CodeSandboxProps; /** @default 'Code' */ btnText?: string; /** @default 'Hide Editor' */ btnHideText?: string; } type CodePenOption = { title?: string; html?: string; js?: string; css?: string; editors?: string; css_external?: string; js_external?: string; js_pre_processor?: string; }; type CodepenProps = CodePenOption & React.FormHTMLAttributes; type CodeSandboxProps = React.FormHTMLAttributes & { /** * Whether we should redirect to the embed instead of the editor. */ embed?: boolean; /** * The query that will be used in the redirect url. `embed` must be equal to `true`, `embed=true`. * [CodeSandbox Embed Options](https://codesandbox.io/docs/embedding#embed-options) * @example `view=preview&runonclick=1` */ query?: string; /** * Instead of redirecting we will send a JSON reponse with `{\"sandbox_id\": sandboxId}`. */ json?: boolean; /** * Parameters used to define how the sandbox should be created. */ files?: Record; isBinary?: boolean; } >; }; Development The components are placed in the src directory. npm run watch # Listen compile .tsx files. npm run build # compile .tsx files. npm run doc Related @uiw/react-markdown-preview: React component preview markdown text in web browser. @uiw/react-codemirror: CodeMirror component for React. @codemirror @uiw/react-monacoeditor: Monaco Editor component for React. @uiw/react-markdown-editor: A markdown editor with preview, implemented with React.js and TypeScript. @uiw/react-md-editor: A simple markdown editor with preview, implemented with React.js and TypeScript. Contributors As always, thanks to our amazing contributors! Made with github-action-contributors. License Licensed under the MIT License. © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"react-markdown-editor.html":{"url":"react-markdown-editor.html","title":"React Markdown editor","keywords":"","body":"react-markdown-editor A markdown editor with preview, implemented with React.js and TypeScript. Install npm i @uiw/react-markdown-editor Document Official document demo preview (🇨🇳 中国镜像网站) Basic Usage import MarkdownEditor from \"@uiw/react-markdown-editor\"; import React from \"react\"; import ReactDOM from \"react-dom\"; const Dome = () => ( ); ReactDOM.render(, document.getElementById(\"app\")); Controlled Usage import MarkdownEditor from \"@uiw/react-markdown-editor\"; import React, { useState } from \"react\"; import ReactDOM from \"react-dom\"; function App() { const [markdown, setMarkdown] = useState(\"\"); return ( setMarkdown(value)} /> ); } ReactDOM.render(, document.getElementById(\"app\")); Custom Toolbars import React from \"react\"; import ReactDOM from \"react-dom\"; import MarkdownEditor from \"@uiw/react-markdown-editor\"; const title2 = { name: \"title2\", keyCommand: \"title2\", icon: ( ), execute: (editor, selection, position) => { const value = selection ? `## ${selection}` : \"## \"; editor.replaceSelection(value); position.ch = !!selection ? position.ch : position.ch + 3; editor.setCursor(position.line, position.ch); editor.focus(); }, }; const Dome = () => ( ); ReactDOM.render(, document.getElementById(\"app\")); Support Nextjs Use examples in nextjs. #52 #224 [] (https://codesandbox.io/embed/nextjs-example-react-markdown-editor-72s9d?fontsize=14&hidenavigation=1&theme=dark) npm install next-remove-imports npm install @uiw/react-markdown-editor // next.config.js const removeImports = require(\"next-remove-imports\")(); module.exports = removeImports({}); import dynamic from \"next/dynamic\"; import \"@uiw/react-markdown-editor/markdown-editor.css\"; import \"@uiw/react-markdown-preview/markdown.css\"; const MarkdownEditor = dynamic( () => import(\"@uiw/react-markdown-editor\").then((mod) => mod.default), { ssr: false } ); function HomePage() { return ( ); } export default HomePage; Support dark-mode/night-mode By default, the dark-mode is automatically switched according to the system. If you need to switch manually, just set the data-color-mode=\"dark\" parameter for html Element. document.documentElement.setAttribute(\"data-color-mode\", \"dark\"); document.documentElement.setAttribute(\"data-color-mode\", \"light\"); Inherit custom color variables by adding .wmde-markdown-var selector. const Demo = () => { return ( ); }; Props value (string) - the raw markdown that will be converted to html (required) visible?: boolean - Shows a preview that will be converted to html. toolbars?: ICommand[] | string[] - Tool display settings. toolbarsMode?: ICommand[] | string[] - Tool display settings. onChange?:function(editor: IInstance, data: CodeMirror.EditorChange, value: string) - called when a change is made onBlur?: function(editor: IInstance, event: Event) - event occurs when an object loses focus previewProps - react-markdown options Other Props Options Development npm run dev npm run type-check:watch npm run doc Related @uiw/react-textarea-code-editor: A simple code editor with syntax highlighting. @uiw/react-codemirror: CodeMirror component for React. @codemirror @uiw/react-monacoeditor: Monaco Editor component for React. @uiw/react-md-editor: A simple markdown editor with preview, implemented with React.js and TypeScript. @uiw/react-markdown-preview: React component preview markdown text in web browser. Contributors As always, thanks to our amazing contributors! Made with github-action-contributors. License Licensed under the MIT License. © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"react-monaco-editor.html":{"url":"react-monaco-editor.html","title":"React Monaco Editor","keywords":"","body":"react-monacoeditor Monaco Editor component for React. demo @jaywcjlove.github.io/react-monacoeditor/ Installation npm install @uiw/react-monacoeditor --save Using import React from \"react\"; import MonacoEditor from \"@uiw/react-monacoeditor\"; I ♥ react-monacoeditor\" options={{ theme: \"vs-dark\", }} />; Using with Webpack import React from \"react\"; import { render } from \"react-dom\"; import MonacoEditor from \"@uiw/react-monacoeditor\"; const code = `import React, { PureComponent } from 'react'; import MonacoEditor from '@uiw/react-monacoeditor'; export default class App extends PureComponent { render() { return ( I ♥ react-codemirror2\" options={{ selectOnLineNumbers: true, roundedSelection: false, cursorStyle: 'line', automaticLayout: false, theme: 'vs-dark', }} /> ); } } `; class App extends React.Component { constructor(props) { super(props); this.state = { code: \"// type your code...\", }; } editorDidMount(editor, monaco) { console.log(\"editorDidMount\", editor, monaco); editor.focus(); } onChange(newValue, e) { console.log(\"onChange\", newValue, e); } render() { const options = { selectOnLineNumbers: true, roundedSelection: false, readOnly: false, cursorStyle: \"line\", automaticLayout: false, theme: \"vs-dark\", scrollbar: { // Subtle shadows to the left & top. Defaults to true. useShadows: false, // Render vertical arrows. Defaults to false. verticalHasArrows: true, // Render horizontal arrows. Defaults to false. horizontalHasArrows: true, // Render vertical scrollbar. // Accepted values: 'auto', 'visible', 'hidden'. // Defaults to 'auto' vertical: \"visible\", // Render horizontal scrollbar. // Accepted values: 'auto', 'visible', 'hidden'. // Defaults to 'auto' horizontal: \"visible\", verticalScrollbarSize: 17, horizontalScrollbarSize: 17, arrowSize: 30, }, }; return ( ); } } render(, document.getElementById(\"root\")); Add the Monaco Editor Webpack Loader Plugin monaco-editor-webpack-plugin to your webpack.config.js: const MonacoWebpackPlugin = require(\"monaco-editor-webpack-plugin\"); module.exports = { plugins: [new MonacoWebpackPlugin()], }; Properties If you specify value property, the component behaves in controlled mode. Otherwise, it behaves in uncontrolled mode. width width of editor. Defaults to 100%. height height of editor. Defaults to 100%. value value of the auto created model in the editor. defaultValue the initial value of the auto created model in the editor. language the initial language of the auto created model in the editor. theme the theme of the editor vs, vs-dark, hc-black options refer to Monaco interface IEditorConstructionOptions. editorDidMount(editor, monaco) an event emitted when the editor has been mounted (similar to componentDidMount of React). onChange(newValue, event) an event emitted when the content of the current model has changed. autoComplete?: (model: monaco.editor.ITextModel, position: monaco.Position) => languages.CompletionItem[]; User provided extension function provider for auto-complete. #47 Events & Methods Refer to Monaco interface IEditor. Related @uiw/react-textarea-code-editor: A simple code editor with syntax highlighting. @uiw/react-codemirror: CodeMirror component for React. @codemirror @uiw/react-monacoeditor: Monaco Editor component for React. @uiw/react-markdown-editor: A markdown editor with preview, implemented with React.js and TypeScript. @uiw/react-md-editor: A simple markdown editor with preview, implemented with React.js and TypeScript. @uiw/react-markdown-preview: React component preview markdown text in web browser. Nginx Editor Nginx language for Monaco Editor. Contributors As always, thanks to our amazing contributors! Made with github-action-contributors. License Licensed under the MIT License. © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"plugin.html":{"url":"plugin.html","title":"Plugin","keywords":"","body":"gitbook插件如何安装，以及定制化插 插件安装 book.json，该文件用于存放配置信息。如果没有，请创建 【title】书本的标题 【author】作者的相关信息 【description】本书的简单描述 【language】gitbook使用的语言 我的是\"zh-hans\", 【root】指定存放 GitBook 文件（除了 book.json）的根目录 【structure】指定自述文件，摘要，词汇表等的路径 gitbook支持许多插件，可以扩展gitbook的功能。 plugins 是配置新增或删除插件的位置,而 Gitbook 默认自带有 5 个插件： sharing：右上角分享功能 font-settings：字体设置（左上方的\"A\"符号） livereload：为 GitBook 实时重新加载 highlight： 代码高亮 search： 导航栏查询功能（不支持中文） pluginsConfig 是插件配置的地方 特别说明 系统自带插件可通过 在插件名前面加减号的方式去除掉，如-sharing 再添加了插件后要加载使用插件，需要使用gitbook install 来安装进项目。否则无法使用。 参考本人完整配置 { \"title\": \"Gitbook教程\", \"description\": \"Gitbook电子书教程\", \"author\": \"Breeze\", \"language\": \"zh-hans\", \"root\": \".\", \"plugins\": [ \"ace\", \"theme-comscore\", \"edit-link\", \"tbfed-pagefooter\", \"expandable-chapters\", \"chapter-fold\", \"back-to-top-button\", \"code\", \"pageview-count\", \"popup\", \"splitter\", \"search-plus\", \"-lunr\", \"-search\" ], \"styles\": { \"website\": \"assets/continuum/cms.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" }, \"pluginsConfig\": { \"edit-link\": { \"base\": \"https://github.com/ITmxs/gitbook-Information-System-Engineer/edit/master\", \"label\": \"Edit This Page\" }, \"tbfed-pagefooter\": { \"copyright\": \"&copy Cyber-Life.cn Studio\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"pluginsConfig\": { \"expandable-chapters\": {} } } } 插件说明 目录章节可折叠：expandable-chapters { { plugins: [\"expandable-chapters\"] } { \"pluginsConfig\": { \"expandable-chapters\":{} } } } 畅言评论：changyan { \"plugins\": [ \"changyan\" ], \"pluginsConfig\": { \"changyan\": { \"appid\": \"your changyan's appid\", \"conf\": \"the conf in the code generate by changyan\" } } } page-treeview 目录 不需要在文档中插入标签，能够支持到 6 级目录，安装即可用。 这个插件生成目录以后，下面有一行关于版权的文字。 这行文字可以通过样式来进行控制，让它不显示出来。 .treeview__container { margin-bottom: 0px !important; } .treeview__container-title { display: none !important; } 复制 code 代码 为代码块添加行号和复制按钮，复制按钮可关闭 单行代码无行号。 \"code\": { \"copyButtons\": false } pageview-count 阅读量计数 该插件用来统计当前页面被访问次数 popup 图片点击查看 插件用于点击图片时，打开新的网页用来查看高清大图。 tbfed-pagefooter 页面添加页脚（简单版） 在每个页面的最下方自动添加页脚信息，配置如下： \"tbfed-pagefooter\": { \"copyright\": \"Copyright © levywang123@gmail.com 2020\", \"modify_label\": \"该文章修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, page-copyright 页面添加页脚（复杂版） 在每个页面的最下方自动添加页脚配置的各个信息，配置如下： \"page-copyright\": { \"description\": \"footer\", \"copyright\": \"Copyright © levywang123@gmail.com 2020\", \"timeColor\": \"#ccc\", \"copyrightColor\": \"#ddd\", \"utcOffset\": \"8\", \"style\": \"normal\", \"noPowered\": false, \"signature\": \"levy\", \"wisdom\": \"footer\", \"format\": \"YYYY-MM-dd hh:mm:ss\", }, favicon 修改图标 修改网页标题的图标，显示个性化 ico \"favicon\": { \"shortcut\": \"assets/favicon.ico\", \"bookmark\": \"assets/favicon.ico\", \"appleTouch\": \"assets/favicon.ico\", \"appleTouchMore\": { \"120x120\": \"assets/favicon.ico\", \"180x180\": \"assets/favicon.ico\" } }, search-plus 替换原搜索插件 原搜索插件不支持中文搜索，所以使用该插件进行替换。需要将原插件进行去除掉。 \"plugins\": [ \"search-plus\", \"-lunr\", \"-search\"] expandable-chapters 及 chapter-fold 导航目录 两个插件配合使用，使导航目录使用更正常，以免出现导航栏问题。 一个支持多层目录，一个是在目录前方加上箭头。使点击两个都有效。 \"plugins\": [ \"expandable-chapters\",\"chapter-fold\"] hide-element 隐藏界面元素 可以隐藏不想看到的元素，比如导航栏中 下方的 Published by GitBook \"elements\": [\".gitbook-link\"] back-to-top-button 返回顶部 在页面篇幅过长时，在界面右下角自动添加上返回顶部的按钮。 splitter 侧边栏宽度调整 添加完插件后，在界面上 侧边栏可自行调整宽度。 sharing-plus 分享插件 需要将自带的插件给隐藏掉 -sharing 分享当前页面，比默认的 sharing 插件多了一些分享方式。 \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": false, \"pocket\": false, \"qq\": false, \"qzone\": false, \"twitter\": false, \"weibo\": false, \"all\": [ \"qq\", \"qzone\",\"viber\",\"whatsapp\", \"douban\", \"facebook\", \"google\", \"instapaper\", \"linkedin\", \"messenger\",\"twitter\", \"weibo\" ] } gitbook-思维导图 一个用Markdown生成思维导图的GitBook插件 \"plugins\": [\"mind-maps\"] 使用 # 1 ## 1.1 ### 1.1.1 ## 1.2 # 2 # 3 ​ - 1 - 1.1 - 1.1.1 - 1.2 - 2 - 3 GitBook 插件：编辑链接 \"plugins\": [\"edit-link\"] 这个 GitBook 插件在每个页面上添加了“编辑此页面”链接。 链接目标将是 Github 或 Gitlab 或任何 repo 上该页面的源文件。 \"edit-link\": { \"base\": \"https://github.com/ITmxs/gitbook/edit/master/\", \"label\": \"编辑此页\" }, Github Buttons 添加项目在 github 上的 star,watch,fork 情况 { \"plugins\": [ \"github-buttons\" ], \"pluginsConfig\": { \"github-buttons\": { \"repo\": \"zhangjikai/gitbook-use\", \"types\": [ \"star\", \"watch\", \"fork\" ], \"size\": \"small\" } } } Emphasize为文字添加底色 \"plugins\": [\"emphasize\"] Anchors 添加 Github 风格的锚点样式 \"plugins\" : [ \"anchors\" ] livereload 为GitBook实时重新加载 advanced-emoji 支持emoji表情 © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"plugin-ace.html":{"url":"plugin-ace.html","title":"Ace","keywords":"","body":"GitBook Ace Plugin This is a code editor plugin for GitBook, for inserting code segments into the book, with syntax highlight supports for about 110 types of programming languages. See the plugin at work here. Syntax The plugin has a basic syntax: {%raw%}// This is a hello world program for C. #include &lt;stdio.h&gt; int main(){ printf(&quot;Hello World!&quot;); return 1; }{%endraw%} Example 1 Here is the \"Hello World\" program of C language. The code editor in this section is set to be editable. // This is a hello world program for C. #include int main(){ printf(\"Hello World!\"); return 1; } Example 2 And a javascript code right here: var message = 'H e l l o W o r l d'; var split = message.split(' ').join(''); console.log(message); console.log(\"testing {{test}}\"); Example 3 And a piece of javascript code with wrong syntax, but with syntax validation disabled. var test = [ somethingIsWrong: 'withThis'; ]; Example 4 Custom theme support is also added. var test = a => ( `ES6 is amazing. ${a}` ); edit: if this is set to true, the code will be editable by the user. lang: the language for syntax highlight. If this is not specified, it will fallback to 'c_cpp' by default. For the full list of keyword for each language, please check out the github page of ace here, all the related files are starting with prefix mode-. For instance: mode_c_cpp.js ----> c_cpp mode_java.js ----> java ... check: if this is set to false, syntax validation will be disabled. theme: the theme for the editor, the default is 'chrome'. monokai coffee ... © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"gitbook-theme.html":{"url":"gitbook-theme.html","title":"Gitbook Theme","keywords":"","body":"Gitbook Theme A Continuum branded theme for Jadu's GitBooks. How to use Add the stylesheet for the relevant Continuum product to your book.json file and run gitbook build. CMS \"styles\": { \"website\": \"assets/continuum/cms.css\" } XFP \"styles\": { \"website\": \"assets/continuum/xfp.css\" } CXM \"styles\": { \"website\": \"assets/continuum/cxm.css\" } CP \"styles\": { \"website\": \"assets/continuum/cp.css\" } © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"mermaid.html":{"url":"mermaid.html","title":"Mermaid","keywords":"","body":"Mermaid Gitbook 插件：支持渲染Mermaid图表 Mermaid-gb3 npm install gitbook-plugin-mermaid-gb3 https://github.com/chriswessels/gitbook-plugin-mermaid-gb3 book.json { \"plugins\": [ \"mermaid-gb3\" ] } 展示效果 Flow 流程图 graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2] Sequence 时序图 sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Gantt 甘特图 gantt section Section Completed :done, des1, 2020-01-06,2020-01-08 Active :active, des2, 2020-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d gantt section Section Completed :done, des1, 2020-01-06,2020-01-08 Active :active, des2, 2020-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d Class diagram classDiagram Class01 C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 C2: Cool label classDiagram Class01 C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 C2: Cool label Git graph - exclamation experimental gitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch gitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch Entity Relationship Diagram - exclamation experimental erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses User Journey Diagram journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me state 状态转移图 stateDiagram [*] --> First First --> Second First --> Third state First { [*] --> fir fir --> [*] } state Second { [*] --> sec sec --> [*] } state Third { [*] --> thi thi --> [*] } stateDiagram [*] --> First First --> Second First --> Third state First { [*] --> fir fir --> [*] } state Second { [*] --> sec sec --> [*] } state Third { [*] --> thi thi --> [*] } © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"faq.html":{"url":"faq.html","title":"FAQ","keywords":"","body":"常见问题 gitbook build 命令导出的html不能跳转的解决办法 具体原因 由于点击事件被 js 代码禁用，所以点击没有反应，但是如果右键，在新窗口/新标签页打开的话是可以跳转的 解决办法 找到js代码，并修改 找到项目目录gitbook 找到目录下的theme.js文件 找到下面的代码 将if(m)改成if(false) 由于代码是压缩后的，会没有空格，搜索的时候可以直接搜索： if(m)for(n.handler&& if (m) for (n.handler && (i = n, n = i.handler, o = i.selector), o && de.find.matchesSelector(Ye, o), n.guid || (n.guid = de.guid++), (u = m.events) || (u = m.events = {}), (a = m.handle) || (a = m.handle = function(t) { return \"undefined\" != typeof de && de.event.triggered !== t.type ? de.event.dispatch.apply(e, arguments) : void 0 } ), t = (t || \"\").match(qe) || [\"\"], l = t.length; l--; ) s = Ze.exec(t[l]) || [], h = g = s[1], d = (s[2] || \"\").split(\".\").sort(), h && (f = de.event.special[h] || {}, h = (o ? f.delegateType : f.bindType) || h, f = de.event.special[h] || {}, c = de.extend({ type: h, origType: g, data: r, handler: n, guid: n.guid, selector: o, needsContext: o && de.expr.match.needsContext.test(o), namespace: d.join(\".\") }, i), (p = u[h]) || (p = u[h] = [], p.delegateCount = 0, f.setup && f.setup.call(e, r, d, a) !== !1 || e.addEventListener && e.addEventListener(h, a)), f.add && (f.add.call(e, c), c.handler.guid || (c.handler.guid = n.guid)), o ? p.splice(p.delegateCount++, 0, c) : p.push(c), de.event.global[h] = !0) } © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:43 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"refrence.html":{"url":"refrence.html","title":"Refrence","keywords":"","body":"参考 Gitbook 说明文档 GitBook Project Test Typora Theme © Cyber-Life.cn Studio all right reserved，powered by Gitbook该文件修订时间： 2022-04-29 19:01:49 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}